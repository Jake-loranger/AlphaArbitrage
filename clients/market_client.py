# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "on_create(string,uint64,address,uint64,address,string,address,uint64,uint64,address)uint8": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_escrow(uint64,uint64,uint64,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "activate_market()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_potential_match(application,application)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolve_market(uint8)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "donate_excess_to_market_friend()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "register_escrow_delete(address)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()uint8": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "do_noop(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "on_update()uint64": {
            "call_config": {
                "update_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 6,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "collateral_asset_id": {
                    "type": "uint64",
                    "key": "collateral_asset_id",
                    "descr": "The asset id of the collatteral"
                },
                "escrow_cancel_address": {
                    "type": "bytes",
                    "key": "escrow_cancel_address",
                    "descr": "The address that can cancel escrows"
                },
                "fee_address": {
                    "type": "bytes",
                    "key": "fee_address",
                    "descr": "The address the fees go to"
                },
                "fee_base_percent": {
                    "type": "uint64",
                    "key": "fee_base_percent",
                    "descr": "The base fee percent of the market"
                },
                "fee_timer_threshold": {
                    "type": "uint64",
                    "key": "fee_timer_threshold",
                    "descr": "The number of seconds since fee_timer_start an order can match within to not pay fee"
                },
                "is_activated": {
                    "type": "uint64",
                    "key": "is_activated",
                    "descr": "The status of the market"
                },
                "is_resolved": {
                    "type": "uint64",
                    "key": "is_resolved",
                    "descr": "The status of the market"
                },
                "market_friend_addr": {
                    "type": "bytes",
                    "key": "market_friend_addr",
                    "descr": "The address of the market friend"
                },
                "no_asset_id": {
                    "type": "uint64",
                    "key": "no_asset_id",
                    "descr": "The asset id of the no outcome"
                },
                "no_supply": {
                    "type": "uint64",
                    "key": "no_supply",
                    "descr": "The supply of the no asset"
                },
                "oracle_address": {
                    "type": "bytes",
                    "key": "oracle_address",
                    "descr": "The address of the oracle"
                },
                "outcome": {
                    "type": "uint64",
                    "key": "outcome",
                    "descr": "The outcome of the market"
                },
                "resolution_time": {
                    "type": "uint64",
                    "key": "resolution_time",
                    "descr": "The timestamp the market should be resolved by (unix seconds)"
                },
                "rules": {
                    "type": "bytes",
                    "key": "rules",
                    "descr": "The rules of the market"
                },
                "title": {
                    "type": "bytes",
                    "key": "title",
                    "descr": "The name of the market"
                },
                "yes_asset_id": {
                    "type": "uint64",
                    "key": "yes_asset_id",
                    "descr": "The asset id of the yes outcome"
                },
                "yes_supply": {
                    "type": "uint64",
                    "key": "yes_supply",
                    "descr": "The supply of the yes asset"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "market_app",
        "methods": [
            {
                "name": "on_create",
                "args": [
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "uint64",
                        "name": "collateral_asset_id"
                    },
                    {
                        "type": "address",
                        "name": "oracle_address"
                    },
                    {
                        "type": "uint64",
                        "name": "resolution_time"
                    },
                    {
                        "type": "address",
                        "name": "market_friend"
                    },
                    {
                        "type": "string",
                        "name": "rules"
                    },
                    {
                        "type": "address",
                        "name": "fee_address"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_base_percent"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_timer_threshhold"
                    },
                    {
                        "type": "address",
                        "name": "escrow_cancel_address"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "create_escrow",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "slippage"
                    },
                    {
                        "type": "uint8",
                        "name": "position"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "activate_market",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "process_potential_match",
                "args": [
                    {
                        "type": "application",
                        "name": "maker"
                    },
                    {
                        "type": "application",
                        "name": "taker"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "resolve_market",
                "args": [
                    {
                        "type": "uint8",
                        "name": "resolution"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "claim",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "donate_excess_to_market_friend",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "register_escrow_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "algo_receiver"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "do_noop",
                "args": [
                    {
                        "type": "uint64",
                        "name": "call_number"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "on_update",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class CreateEscrowArgs(_ArgsBase[int]):
    price: int
    quantity: int
    slippage: int
    position: int

    @staticmethod
    def method() -> str:
        return "create_escrow(uint64,uint64,uint64,uint8)uint64"


@dataclasses.dataclass(kw_only=True)
class ActivateMarketArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "activate_market()uint8"


@dataclasses.dataclass(kw_only=True)
class ProcessPotentialMatchArgs(_ArgsBase[int]):
    maker: int
    taker: int

    @staticmethod
    def method() -> str:
        return "process_potential_match(application,application)uint8"


@dataclasses.dataclass(kw_only=True)
class ResolveMarketArgs(_ArgsBase[int]):
    resolution: int

    @staticmethod
    def method() -> str:
        return "resolve_market(uint8)uint8"


@dataclasses.dataclass(kw_only=True)
class ClaimArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "claim()uint8"


@dataclasses.dataclass(kw_only=True)
class DonateExcessToMarketFriendArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "donate_excess_to_market_friend()uint8"


@dataclasses.dataclass(kw_only=True)
class RegisterEscrowDeleteArgs(_ArgsBase[int]):
    algo_receiver: str

    @staticmethod
    def method() -> str:
        return "register_escrow_delete(address)uint8"


@dataclasses.dataclass(kw_only=True)
class DoNoopArgs(_ArgsBase[int]):
    call_number: int

    @staticmethod
    def method() -> str:
        return "do_noop(uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class OnCreateArgs(_ArgsBase[int]):
    title: str
    collateral_asset_id: int
    oracle_address: str
    resolution_time: int
    market_friend: str
    rules: str
    fee_address: str
    fee_base_percent: int
    fee_timer_threshhold: int
    escrow_cancel_address: str

    @staticmethod
    def method() -> str:
        return "on_create(string,uint64,address,uint64,address,string,address,uint64,uint64,address)uint8"


@dataclasses.dataclass(kw_only=True)
class OnUpdateArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "on_update()uint64"


@dataclasses.dataclass(kw_only=True)
class DeleteArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "delete()uint8"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.collateral_asset_id = typing.cast(int, data.get(b"collateral_asset_id"))
        """The asset id of the collatteral"""
        self.escrow_cancel_address = ByteReader(typing.cast(bytes, data.get(b"escrow_cancel_address")))
        """The address that can cancel escrows"""
        self.fee_address = ByteReader(typing.cast(bytes, data.get(b"fee_address")))
        """The address the fees go to"""
        self.fee_base_percent = typing.cast(int, data.get(b"fee_base_percent"))
        """The base fee percent of the market"""
        self.fee_timer_threshold = typing.cast(int, data.get(b"fee_timer_threshold"))
        """The number of seconds since fee_timer_start an order can match within to not pay fee"""
        self.is_activated = typing.cast(int, data.get(b"is_activated"))
        """The status of the market"""
        self.is_resolved = typing.cast(int, data.get(b"is_resolved"))
        """The status of the market"""
        self.market_friend_addr = ByteReader(typing.cast(bytes, data.get(b"market_friend_addr")))
        """The address of the market friend"""
        self.no_asset_id = typing.cast(int, data.get(b"no_asset_id"))
        """The asset id of the no outcome"""
        self.no_supply = typing.cast(int, data.get(b"no_supply"))
        """The supply of the no asset"""
        self.oracle_address = ByteReader(typing.cast(bytes, data.get(b"oracle_address")))
        """The address of the oracle"""
        self.outcome = typing.cast(int, data.get(b"outcome"))
        """The outcome of the market"""
        self.resolution_time = typing.cast(int, data.get(b"resolution_time"))
        """The timestamp the market should be resolved by (unix seconds)"""
        self.rules = ByteReader(typing.cast(bytes, data.get(b"rules")))
        """The rules of the market"""
        self.title = ByteReader(typing.cast(bytes, data.get(b"title")))
        """The name of the market"""
        self.yes_asset_id = typing.cast(int, data.get(b"yes_asset_id"))
        """The asset id of the yes outcome"""
        self.yes_supply = typing.cast(int, data.get(b"yes_supply"))
        """The supply of the yes asset"""


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def create_escrow(
        self,
        *,
        price: int,
        quantity: int,
        slippage: int,
        position: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_escrow(uint64,uint64,uint64,uint8)uint64` ABI method
        
        :param int price: The `price` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param int slippage: The `slippage` ABI parameter
        :param int position: The `position` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateEscrowArgs(
            price=price,
            quantity=quantity,
            slippage=slippage,
            position=position,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def activate_market(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `activate_market()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ActivateMarketArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def process_potential_match(
        self,
        *,
        maker: int,
        taker: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `process_potential_match(application,application)uint8` ABI method
        
        :param int maker: The `maker` ABI parameter
        :param int taker: The `taker` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ProcessPotentialMatchArgs(
            maker=maker,
            taker=taker,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def resolve_market(
        self,
        *,
        resolution: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `resolve_market(uint8)uint8` ABI method
        
        :param int resolution: The `resolution` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ResolveMarketArgs(
            resolution=resolution,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `claim()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def donate_excess_to_market_friend(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `donate_excess_to_market_friend()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DonateExcessToMarketFriendArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def register_escrow_delete(
        self,
        *,
        algo_receiver: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `register_escrow_delete(address)uint8` ABI method
        
        :param str algo_receiver: The `algo_receiver` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegisterEscrowDeleteArgs(
            algo_receiver=algo_receiver,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def do_noop(
        self,
        *,
        call_number: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `do_noop(uint64)uint64` ABI method
        
        :param int call_number: The `call_number` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DoNoopArgs(
            call_number=call_number,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_on_create(
        self,
        *,
        title: str,
        collateral_asset_id: int,
        oracle_address: str,
        resolution_time: int,
        market_friend: str,
        rules: str,
        fee_address: str,
        fee_base_percent: int,
        fee_timer_threshhold: int,
        escrow_cancel_address: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `on_create(string,uint64,address,uint64,address,string,address,uint64,uint64,address)uint8` ABI method
        
        :param str title: The `title` ABI parameter
        :param int collateral_asset_id: The `collateral_asset_id` ABI parameter
        :param str oracle_address: The `oracle_address` ABI parameter
        :param int resolution_time: The `resolution_time` ABI parameter
        :param str market_friend: The `market_friend` ABI parameter
        :param str rules: The `rules` ABI parameter
        :param str fee_address: The `fee_address` ABI parameter
        :param int fee_base_percent: The `fee_base_percent` ABI parameter
        :param int fee_timer_threshhold: The `fee_timer_threshhold` ABI parameter
        :param str escrow_cancel_address: The `escrow_cancel_address` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OnCreateArgs(
            title=title,
            collateral_asset_id=collateral_asset_id,
            oracle_address=oracle_address,
            resolution_time=resolution_time,
            market_friend=market_friend,
            rules=rules,
            fee_address=fee_address,
            fee_base_percent=fee_base_percent,
            fee_timer_threshhold=fee_timer_threshhold,
            escrow_cancel_address=escrow_cancel_address,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_on_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `on_update()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OnUpdateArgs()
        self.app_client.compose_update(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `delete()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class MarketAppClient:
    """A class for interacting with the market_app app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        MarketAppClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def create_escrow(
        self,
        *,
        price: int,
        quantity: int,
        slippage: int,
        position: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `create_escrow(uint64,uint64,uint64,uint8)uint64` ABI method
        
        :param int price: The `price` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param int slippage: The `slippage` ABI parameter
        :param int position: The `position` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = CreateEscrowArgs(
            price=price,
            quantity=quantity,
            slippage=slippage,
            position=position,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def activate_market(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `activate_market()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ActivateMarketArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def process_potential_match(
        self,
        *,
        maker: int,
        taker: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `process_potential_match(application,application)uint8` ABI method
        
        :param int maker: The `maker` ABI parameter
        :param int taker: The `taker` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ProcessPotentialMatchArgs(
            maker=maker,
            taker=taker,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def resolve_market(
        self,
        *,
        resolution: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `resolve_market(uint8)uint8` ABI method
        
        :param int resolution: The `resolution` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ResolveMarketArgs(
            resolution=resolution,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `claim()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ClaimArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def donate_excess_to_market_friend(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `donate_excess_to_market_friend()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = DonateExcessToMarketFriendArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def register_escrow_delete(
        self,
        *,
        algo_receiver: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `register_escrow_delete(address)uint8` ABI method
        
        :param str algo_receiver: The `algo_receiver` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = RegisterEscrowDeleteArgs(
            algo_receiver=algo_receiver,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def do_noop(
        self,
        *,
        call_number: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `do_noop(uint64)uint64` ABI method
        
        :param int call_number: The `call_number` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = DoNoopArgs(
            call_number=call_number,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_on_create(
        self,
        *,
        title: str,
        collateral_asset_id: int,
        oracle_address: str,
        resolution_time: int,
        market_friend: str,
        rules: str,
        fee_address: str,
        fee_base_percent: int,
        fee_timer_threshhold: int,
        escrow_cancel_address: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `on_create(string,uint64,address,uint64,address,string,address,uint64,uint64,address)uint8` ABI method
        
        :param str title: The `title` ABI parameter
        :param int collateral_asset_id: The `collateral_asset_id` ABI parameter
        :param str oracle_address: The `oracle_address` ABI parameter
        :param int resolution_time: The `resolution_time` ABI parameter
        :param str market_friend: The `market_friend` ABI parameter
        :param str rules: The `rules` ABI parameter
        :param str fee_address: The `fee_address` ABI parameter
        :param int fee_base_percent: The `fee_base_percent` ABI parameter
        :param int fee_timer_threshhold: The `fee_timer_threshhold` ABI parameter
        :param str escrow_cancel_address: The `escrow_cancel_address` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = OnCreateArgs(
            title=title,
            collateral_asset_id=collateral_asset_id,
            oracle_address=oracle_address,
            resolution_time=resolution_time,
            market_friend=market_friend,
            rules=rules,
            fee_address=fee_address,
            fee_base_percent=fee_base_percent,
            fee_timer_threshhold=fee_timer_threshhold,
            escrow_cancel_address=escrow_cancel_address,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_on_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `on_update()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = OnUpdateArgs()
        result = self.app_client.update(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `delete()uint8` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = DeleteArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[OnCreateArgs],
        update_args: Deploy[OnUpdateArgs],
        delete_args: Deploy[DeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[OnCreateArgs] create_args: Arguments used when creating an application
        :param Deploy[OnUpdateArgs] update_args: Arguments used when updating an application
        :param Deploy[DeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())