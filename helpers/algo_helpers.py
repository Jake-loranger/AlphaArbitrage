import time
from algosdk import account, mnemonic, transaction
from algosdk.v2client import algod
import math
import os
import math
import algosdk
from dotenv import load_dotenv
from algosdk import mnemonic, account
from algosdk.transaction import PaymentTxn, AssetTransferTxn
from algosdk.abi import Method
from algosdk.abi.method import Argument, Returns
from algosdk.error import AlgodHTTPError
from helpers.alpha_helpers import calculate_fee
from models.market import Market
from algokit_utils import (
    AppClient, 
    AlgorandClient,
    AppClientParams, 
    AppClientMethodCallParams,
    AlgoAmount,
    ApplicationSpecification
)
from algosdk.atomic_transaction_composer import (
    AccountTransactionSigner,
    AtomicTransactionComposer,
    TransactionWithSigner,
)

def generate_algorand_account():
    private_key, address = account.generate_account()
    passphrase = mnemonic.from_private_key(private_key)
    
    print("Address:", address)
    print("Mnemonic:", passphrase)

    return {
        "address": address,
        "private_key": private_key,
        "mnemonic": passphrase
    }

def connect_wallet(mnemonic_phrase: str = None) -> tuple:
    """
    Retrieves the user's wallet address, private key, and initializes the algod client.

    Returns:
        tuple:
            - algod_client (AlgodClient): The client used to interact with the Algorand network.
            - address (str): The public Algorand wallet address.
            - private_key (str): The private key derived from the mnemonic, used to sign transactions.
    """
    if not mnemonic_phrase:
        raise ValueError("MNEMONIC_PHRASE not found in environment variables")

    private_key = mnemonic.to_private_key(mnemonic_phrase)
    address = account.address_from_private_key(private_key)

    algod_client = algod.AlgodClient("", "https://mainnet-api.4160.nodely.dev")
    return algod_client, address, private_key

async def check_asset_opt_in(address, asset_id, algod_client):
    """
    Checks if the given address is opted into the specified asset.
    
    Args:
        address (str): The wallet address to check.
        asset_id (int): The asset ID to check for opt-in.
        algod_client: The Algorand algod client.

    Returns:
        bool: True if opted in, False otherwise.
    """
    info = algod_client.account_info(address)
    for asset in info.get("assets", []):
        if asset.get("asset-id") == asset_id:
            return True
    return False

def wait_for_confirmation(client, txid, timeout=10):
    start = time.time()
    while True:
        try:
            result = client.pending_transaction_info(txid)
            if result.get("confirmed-round", 0) > 0:
                return result
        except Exception:
            pass
        if time.time() - start > timeout:
            raise Exception(f"Transaction not confirmed after {timeout}s")
        time.sleep(1)

def opt_in_to_asset(algod_client, address: str, private_key: str, asset_id: int):
    """
    Sends a 0-amount asset transfer to self to opt into the asset.

    Args:
        algod_client: The Algorand algod client.
        address (str): The wallet address performing the opt-in.
        private_key (str): The private key to sign the transaction.
        asset_id (int): The asset ID to opt into.
    """
    try:
        params = algod_client.suggested_params()
        txn = transaction.AssetTransferTxn(
            sender=address,
            sp=params,
            receiver=address,
            amt=0,
            index=asset_id
        )
        signed_txn = txn.sign(private_key)
        txid = algod_client.send_transaction(signed_txn)
        print(f"Sent opt-in transaction for asset {asset_id}, txID: {txid}")

        transaction.wait_for_confirmation(algod_client, txid, 4)
        print(f"Successfully opted into asset {asset_id}")
    except Exception as e:
        print(f"Error opting into asset {asset_id}:", e)

async def create_bet(
    is_buying: bool,
    quantity: int,
    price: int,
    position: int,
    slippage: int,
    market: Market
):
    # Load config
    sender_mnemonic = os.getenv("SENDER_MNEMONIC")
    market_app_id   = int(os.getenv("MARKET_APP_ID", "0"))
    usdc_asset_id   = int(os.getenv("USDC_ASSET_ID", "0"))
    yes_asset_id    = int(os.getenv("YES_ASSET_ID", "0"))
    no_asset_id     = int(os.getenv("NO_ASSET_ID", "0"))

    if not all([sender_mnemonic, market_app_id, usdc_asset_id, yes_asset_id, no_asset_id]):
        raise Exception("Missing environment variables")

    # Setup clients and keys
    algorand = AlgorandClient.mainnet()
    algod_client = algorand.client.algod
    private_key = mnemonic.to_private_key(sender_mnemonic)
    sender_address = account.address_from_private_key(private_key)
    signer = AccountTransactionSigner(private_key)

    print(f"Sender: {sender_address}\nMarket App ID: {market_app_id}")
    print(f"{'Buying' if is_buying else 'Selling'} {'YES' if position else 'NO'} tokens: qty={quantity}, price={price/1e6} USDC")

    sp = algod_client.suggested_params()
    
    fund_asset_id = usdc_asset_id if is_buying else (yes_asset_id if position == 1 else no_asset_id)
    opt_asset_id = yes_asset_id if is_buying and position == 1 else (
                   no_asset_id  if is_buying and position == 0 else (
                   usdc_asset_id if not is_buying else usdc_asset_id))

    # Pre-opt-in if needed
    if not await check_asset_opt_in(sender_address, opt_asset_id, algod_client):
        print(f"Opting in to asset {opt_asset_id}...")
        txn = AssetTransferTxn(sender_address, sp, sender_address, 0, opt_asset_id, note=b"Opt-in")
        signed = txn.sign(private_key)
        txid = algod_client.send_transaction(signed)
        wait_for_confirmation(algod_client, txid)
        print("Opt-in confirmed.")

    # Build ABI Method
    create_escrow_method = Method(
        name="create_escrow",
        args=[
            Argument(name="price", arg_type="uint64"),
            Argument(name="quantity", arg_type="uint64"),
            Argument(name="slippage", arg_type="uint64"),
            Argument(name="position", arg_type="uint8"),
        ],
        returns=Returns(arg_type="uint64")
    )

    # Atomic group: ALGO, asset, app call
    atc = AtomicTransactionComposer()
    atc.add_transaction(TransactionWithSigner(
        PaymentTxn(
            sender_address, 
            sp, 
            algosdk.logic.get_application_address(market_app_id),
            967_600, 
            note=b"Escrow ALGO Funding"),
        signer
    ))

    # Asset funding
    fee = calculate_fee(quantity, price, fee_base=70_000) 
    asset_amt = math.floor(quantity * price / 1_000_000) + fee
    atc.add_transaction(TransactionWithSigner(
        AssetTransferTxn(
            sender_address, 
            sp, 
            algosdk.logic.get_application_address(market_app_id),
            asset_amt, 
            fund_asset_id,
            note=b"Escrow Asset Funding"
        ),
        signer
    ))
    
    # App call
    try:
        result = atc.add_method_call(
            app_id=market_app_id,
            method=create_escrow_method,
            sender=sender_address,
            sp=sp,
            signer=signer,
            method_args=[
                price,    
                quantity, 
                slippage, 
                position  
            ],
            foreign_assets=[usdc_asset_id, yes_asset_id, no_asset_id]
        )
        print("Submitting group...")
        res = atc.execute(algod_client, 4)
        print(f"Success: {res.tx_ids}, confirmed in {res.confirmed_round}")
    except AlgodHTTPError as e:
        print(f"ATC error: {e}")



ESCROW_APP_SPEC_JSON = r"""{
    "hints": {
        "on_create()uint8": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "setup(string,string,string,string,string)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "match_maker(application,uint64)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "match_taker(application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reclaim_fees()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()uint8": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "on_update()uint64": {
            "call_config": {
                "update_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asset_listed": {
                    "type": "uint64",
                    "key": "asset_listed",
                    "descr": "The asset id of the escrow"
                },
                "fee_timer_start": {
                    "type": "uint64",
                    "key": "fee_timer_start",
                    "descr": "The timestamp of the fee timer start"
                },
                "market_app_id": {
                    "type": "uint64",
                    "key": "market_app_id",
                    "descr": "The id of the market app"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner",
                    "descr": "The owner of the escrow"
                },
                "position": {
                    "type": "uint64",
                    "key": "position",
                    "descr": "The position of the escrow: yes/no"
                },
                "price": {
                    "type": "uint64",
                    "key": "price",
                    "descr": "The price of the escrow"
                },
                "quantity": {
                    "type": "uint64",
                    "key": "quantity",
                    "descr": "The quantity of the escrow"
                },
                "quantity_filled": {
                    "type": "uint64",
                    "key": "quantity_filled",
                    "descr": "The quantity of the escrow filled"
                },
                "side": {
                    "type": "uint64",
                    "key": "side",
                    "descr": "The side of the escrow: buy/sell"
                },
                "slippage": {
                    "type": "uint64",
                    "key": "slippage",
                    "descr": "The slippage of the escrow. 0 if limit."
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "escrow_app",
        "methods": [
            {
                "name": "on_create",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "setup",
                "args": [
                    {
                        "type": "string",
                        "name": "position"
                    },
                    {
                        "type": "string",
                        "name": "price"
                    },
                    {
                        "type": "string",
                        "name": "side"
                    },
                    {
                        "type": "string",
                        "name": "quantity"
                    },
                    {
                        "type": "string",
                        "name": "slippage"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "match_maker",
                "args": [
                    {
                        "type": "application",
                        "name": "taker"
                    },
                    {
                        "type": "uint64",
                        "name": "match_quantity"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "match_taker",
                "args": [
                    {
                        "type": "application",
                        "name": "maker"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "reclaim_fees",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "on_update",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
ESCROW_APP_SPEC = ApplicationSpecification.from_json(ESCROW_APP_SPEC_JSON)

MARKET_APP_SPEC_JSON = r"""{
    "hints": {
        "on_create(string,uint64,address,uint64,address,string,address,uint64,uint64,address)uint8": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_escrow(uint64,uint64,uint64,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "activate_market()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_potential_match(application,application)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolve_market(uint8)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "donate_excess_to_market_friend()uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "register_escrow_delete(address)uint8": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()uint8": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "do_noop(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "on_update()uint64": {
            "call_config": {
                "update_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 6,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "collateral_asset_id": {
                    "type": "uint64",
                    "key": "collateral_asset_id",
                    "descr": "The asset id of the collatteral"
                },
                "escrow_cancel_address": {
                    "type": "bytes",
                    "key": "escrow_cancel_address",
                    "descr": "The address that can cancel escrows"
                },
                "fee_address": {
                    "type": "bytes",
                    "key": "fee_address",
                    "descr": "The address the fees go to"
                },
                "fee_base_percent": {
                    "type": "uint64",
                    "key": "fee_base_percent",
                    "descr": "The base fee percent of the market"
                },
                "fee_timer_threshold": {
                    "type": "uint64",
                    "key": "fee_timer_threshold",
                    "descr": "The number of seconds since fee_timer_start an order can match within to not pay fee"
                },
                "is_activated": {
                    "type": "uint64",
                    "key": "is_activated",
                    "descr": "The status of the market"
                },
                "is_resolved": {
                    "type": "uint64",
                    "key": "is_resolved",
                    "descr": "The status of the market"
                },
                "market_friend_addr": {
                    "type": "bytes",
                    "key": "market_friend_addr",
                    "descr": "The address of the market friend"
                },
                "no_asset_id": {
                    "type": "uint64",
                    "key": "no_asset_id",
                    "descr": "The asset id of the no outcome"
                },
                "no_supply": {
                    "type": "uint64",
                    "key": "no_supply",
                    "descr": "The supply of the no asset"
                },
                "oracle_address": {
                    "type": "bytes",
                    "key": "oracle_address",
                    "descr": "The address of the oracle"
                },
                "outcome": {
                    "type": "uint64",
                    "key": "outcome",
                    "descr": "The outcome of the market"
                },
                "resolution_time": {
                    "type": "uint64",
                    "key": "resolution_time",
                    "descr": "The timestamp the market should be resolved by (unix seconds)"
                },
                "rules": {
                    "type": "bytes",
                    "key": "rules",
                    "descr": "The rules of the market"
                },
                "title": {
                    "type": "bytes",
                    "key": "title",
                    "descr": "The name of the market"
                },
                "yes_asset_id": {
                    "type": "uint64",
                    "key": "yes_asset_id",
                    "descr": "The asset id of the yes outcome"
                },
                "yes_supply": {
                    "type": "uint64",
                    "key": "yes_supply",
                    "descr": "The supply of the yes asset"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "market_app",
        "methods": [
            {
                "name": "on_create",
                "args": [
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "uint64",
                        "name": "collateral_asset_id"
                    },
                    {
                        "type": "address",
                        "name": "oracle_address"
                    },
                    {
                        "type": "uint64",
                        "name": "resolution_time"
                    },
                    {
                        "type": "address",
                        "name": "market_friend"
                    },
                    {
                        "type": "string",
                        "name": "rules"
                    },
                    {
                        "type": "address",
                        "name": "fee_address"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_base_percent"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_timer_threshhold"
                    },
                    {
                        "type": "address",
                        "name": "escrow_cancel_address"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "create_escrow",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "slippage"
                    },
                    {
                        "type": "uint8",
                        "name": "position"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "activate_market",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "process_potential_match",
                "args": [
                    {
                        "type": "application",
                        "name": "maker"
                    },
                    {
                        "type": "application",
                        "name": "taker"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "resolve_market",
                "args": [
                    {
                        "type": "uint8",
                        "name": "resolution"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "claim",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "donate_excess_to_market_friend",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "register_escrow_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "algo_receiver"
                    }
                ],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "do_noop",
                "args": [
                    {
                        "type": "uint64",
                        "name": "call_number"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "on_update",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
MARKET_APP_SPEC = ApplicationSpecification.from_json(MARKET_APP_SPEC_JSON)

async def cancel_bet(
    escrow_app_id: int,
    market_app_id: int,
) -> None:
    sender_mnemonic = os.getenv("SENDER_MNEMONIC")
    if not sender_mnemonic:
        raise ValueError("Missing sender mnemonic in environment.")

    algorand = AlgorandClient.mainnet()
    algod_client = algorand.client.algod
    private_key = mnemonic.to_private_key(sender_mnemonic)
    sender_address = account.address_from_private_key(private_key)
    signer = AccountTransactionSigner(private_key)

    # Create AppClients for each contract
    escrow_app_client = AppClient(
        AppClientParams(
            app_spec=ESCROW_APP_SPEC,
            app_id=escrow_app_id,
            algorand=algorand,
            default_sender=sender_address
        )
    )

    market_app_client = AppClient(
        AppClientParams(
            app_spec=MARKET_APP_SPEC,
            app_id=market_app_id,
            algorand=algorand,
            default_sender=sender_address
        )
    )

    atc = AtomicTransactionComposer()

    delete_escrow_txn = escrow_app_client.create_transaction.delete(
        AppClientMethodCallParams(
            method="delete",
            extra_fee=AlgoAmount(micro_algo=4000),
            args=[],
            asset_references=[
                int(os.environ["USDC_ASSET_ID"]),
                int(os.environ["YES_ASSET_ID"]),
                int(os.environ["NO_ASSET_ID"]),
            ],
            app_references=[market_app_id],
            signer=signer
        )
    )
    atc.add_transaction(TransactionWithSigner(delete_escrow_txn.transactions[0], signer))

    register_escrow_delete_txn = market_app_client.create_transaction.call(
        AppClientMethodCallParams(
            method="register_escrow_delete",
            extra_fee=AlgoAmount(micro_algo=1000),
            args=[sender_address],  
            asset_references=[
                int(os.environ["USDC_ASSET_ID"]),
                int(os.environ["YES_ASSET_ID"]),
                int(os.environ["NO_ASSET_ID"]),
            ],
            app_references=[escrow_app_id],
            signer=signer
        )
    )
    atc.add_transaction(TransactionWithSigner(register_escrow_delete_txn.transactions[0], signer))

    try:
        res = atc.execute(algod_client, 4)
        print(f"Success: {res.tx_ids}, confirmed in {res.confirmed_round}")
    except AlgodHTTPError as e:
        print(f"ATC error: {e}")